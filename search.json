[{"title":"Hello World","url":"/2023/01/12/hello-world/","content":"内容测试作为在Github Page的第一篇内容，会对一些md的基本内容做一些测试\n\n\n表格\n\n\n1\n2\n3\n\n\n\nHaHa\nHaHa\nHi\n\n\nAll work and no play make Jack a dull boy\nLife is like a box  of chocolate\nLong text in this row\n\n\n表格测试\n表格测试\n表格测试\n\n\n公式测试inline mode\n\n成功了但是很怪，反正能用就行\ninterline mode（下面应该有一堆数学符号，如果没有就是你加载失败了，可以刷新一下或者等一会）\n图片测试jpg👇\n\n\ngif👇\n\n代码！python\nfrom test import testimport f61d'''这是一段长注释'''# 单行注释for _ in range(114514):    passf61d.Help(0)print(\"HaHaHa, this is a test program.\")\n\nc\n#include&lt;stdio.h&gt;int main(){    printf(\"Hello world.\");    return 0;}\n\nterminal comands…\nffmpeg -ss 00:05 -i 1.mp4 -t 01:00 -c:a copy -c:v copy --losslesspython -m pip install f61d\n\n\n\n\n\n超链接没啥测试的必要，主要是不知道该写点什么。。。\n我的csdn主页\n列表\n  根本没用过这功能\n\n\n1\n\n2\n\n3\n\n \nTask1\n\n \nTask2\n\n \nTask3\n\n\n格式加粗\n斜体\n加粗斜体\n下划线 \n代码\n==高亮==     （不支持高亮）\n删除线\n哈哈哈^上标^  （不支持上标）\n哈哈哈下标  （不支持下biao）\n\n\n[TOC]\n(不支持目录。。。)\n","tags":["hello world"]},{"title":"New Blog","url":"/2023/01/12/image-test/","content":"测试图片能否在首页预览\n\n\n\n\n\n\n\n\np1图源pixiv\n幻影坦克测试\n","tags":["hello world"]},{"title":"满江红","url":"/2023/01/26/%E6%BB%A1%E6%B1%9F%E7%BA%A2/","content":"满江红，2023年春节档电影，张艺谋导演的。\n\n\n一坨屎\n\n\n\n\n电影内容电影前10分钟就透露出一种粗制滥造的感觉，看了近一个小时才看懂导演是真的在讲一个故事。\n全片90%都在那寥寥几个场景里进行–。转场时放的bgm更是不明所以，吓人一跳。（似乎是改编的摇滚版豫剧，但和岳飞毫无关系）\n剧情更是一坨狗屎，一条直线叙事，悬疑了个屁，顶多是有几个转折。我没怎么玩过剧本杀不好作比喻，但剧情就是一坨狗屎。《满江红》根本不是岳飞遗言，强行煽情，更是为了硬凑历史，强行不杀秦桧。\n我看有评论说是，这个电影还算不错，是因为流浪地球2太优秀才不被认可。我不这么认为，不论同期的其他电影什么质量，客观来看，满江红电影就是依托答辩。整个电影，就像是个不知名的垃圾小导演拍的网络电影\n自己给自己打的标签是悬疑喜剧，但全片的笑点就靠沈腾两个字，作为一部春节档的“喜剧”电影，但内容却有很多色情暗示和血腥画面，\n易烊千玺令我恶心，专门给他设一章\n全程板着个脸，演的一坨屎。不过我作为一个小镇做题家，没资格评论。\n刷票房，偷票房先不说连续13天排满的阴兵专场，还有掌握超时空放映技术的电影院\n\n\n（这个影院连续十三天都排好了并且满座）\n\n（电影两个半小时，但同一影厅10分钟放一场）\n脸都不要了，电影烂的要死，还明目张胆的干这恶心事。\n","tags":["影评","电影","满江红"]},{"title":"数据安全大赛wp","url":"/2023/02/23/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bwp/","content":"第一届数据安全大赛，收手机有点离谱。\n数据算法题Address部分，用正则筛源数据中有很多离谱的小区名，地名等等，比如城中村，快递站，交叉口东北方…，所以表达式比较复杂，但最核心的部分就是“省市区镇乡县路”这样的\n表达式长这样\n\n（Cyberchief和python re的表达式还不一样，挺操蛋的）\n但是这样有问题，会有一些奇怪的字段被匹配上，核心问题在前3行，\n'''.{1,8}[省市](.{2,4}[市区])'''\n\n 这部分，为了能直辖市，所以可以以”市”开头，但会出现一些奇怪的结果\n这里取结果的最后几个看看\n\n所以把直辖市的情况分开来匹配\n非直辖市：\nbds = '(.{2}省(.{1,8}自治区.{1})?(.{2,4}市)(.{1,8}自治.{1})?(.{2,7}[区县乡镇])?(.{1,8}自治.{1})?(.{1,7}[路道局院厅])?(.{1,5}[街道路])?(.{1,5}[号门区府寓])?(.{1,10}[大厦总部]{2})?(.{1,10}[小区公司园社花广市中心场机场]{2})?(.{1,10}[城厂方])?(.{1,4}街道)?(办.{1}处)?(航.{1}楼)?(.{1,6}[村园])?(居委会)?(.{1,6}[组局])?(.{1,4}[幢栋弄])?(.{1,4}单元)?([0-9]{2,5}[号]?)?(.{1,4}[层楼])?([0-9]{2,5}[室屋号房]?)?(房)?(快递点)?(.{1-3}座)?(.{1-3}座)?)'\n\n直辖市\nbds = '([重庆上海天津北京]{2,4}[市](.{1,8}自治.{1})?(.{2,7}[区县乡镇])?(.{1,8}自治.{1})?(.{1,7}[路道局院厅])?(.{1,5}[街道路])?(.{1,5}[号门区府寓])?(.{1,10}[大厦总部]{2})?(.{1,10}[小区公司园社花广市中心场机场]{2})?(.{1,10}[城厂方])?(.{1,4}街道)?(办事处)?(航站楼)?(.{1,6}[村园])?(居委会)?(.{1,6}[组局])?(.{1,4}[幢栋弄])?(.{1,4}单元)?([0-9]{2,5}[号]?)?(.{1,4}[层楼])?([0-9]{2,5}[室屋号房]?)?(快递点)?(.{1-3}座)?(.{1-3}座)?)'\n\n\n\nCrypto-weaksystemMT19937 随机数预测\n通过128bit的n可以直接分解。yafu不好调用的话，用sage的factor函数也行。\nsage代码\nfrom pwn import *from f61d import *import stringfrom mt19937predictor import MT19937Predictor io = remote('39.106.48.123',37074)p = io.recvuntil(b'XXXX: ')io.sendline(prove(p))e = 0x10001mt = MT19937Predictor()for t in range(312):    print(f\"Round {t}\".center(100))    io.recvuntil(b'&gt;')    io.sendline(b'1')    n = io.recvline()    n = eval(n.decode().strip('n = '))    c = eval(io.recvline().decode().strip('c = '))    p,q = [i[0] for i in factor(n)]    assert p*q == n    phin = p*q-p-q+1    d = pow(e,-1,phin)    assert e*d%phin == 1    d = int(d)    m = pow(c,d,n)    assert pow(m,e,n) == c    mt.setrandbits(m, 64)    io.sendlineafter(b'input m',str(m).encode())    print(io.recvline())for t in range(100):    print(f\"Round {t}\".center(100))    print(io.recvuntil(b'&gt;'))    io.sendline(b'2')    n = io.recvline()    n = eval(n.decode().strip('n = '))    c = eval(io.recvline().decode().strip('c = '))    m = mt.getrandbits(64)    if not pow(m,e,n) == c:        print('m error ')    io.sendlineafter(b'input m',str(m).encode())    print(io.recvline())context.log_level='debug'io.recvuntil(b'&gt;')io.sendline(b'4')io.interactive()\n\n库是这个，对于连续完整的32*nbit的情况，这个库一把梭就行了\nkmyk/mersenne-twister-predictor\n","tags":["WriteUp","crypto","CTF"]},{"title":"夜兰e 77.9w","url":"/2023/03/22/%E5%A4%9C%E5%85%B0e-77-9w/","content":"80散兵\n1+1夜兰 8级e终末安柏教官莫娜\n\n\n\n\n因为不吃攻击力 所以拐比较有限\n77.9w\n\n","tags":["原"]},{"title":"数字网络安全人才挑战赛2023 crypto babysecret","url":"/2023/03/25/%E6%95%B0%E5%AD%97%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BA%BA%E6%89%8D%E6%8C%91%E6%88%98%E8%B5%9B2023-crypto-babysecret/","content":"构造格解出x后，Pohlig-Hellman得到flag\n\n\n题目：\nfrom Crypto.Util.number import *from secrets import flagassert len(flag) == 38t = 30p = getPrime(512)x = getPrime(512)while x &gt; p:    x = getPrime(512)rs = []cs = []ss = []for i in range(t):    r = getPrime(512)    s = getPrime(400)    c = (r * x + s) % p    rs.append(r)    cs.append(c)    ss.append(s)enc = pow(x,flag,p)print(f'p = {p}')print(f'rs = {rs}')print(f'cs = {cs}')print(f'enc = {enc}')p = 6897108443075981744484758716081045417854227543713106404294789655180105457499042179717447342593790180943415014044830872925165163457476209819356694244840079rs = [12844634549263053228759749264403637022740290008286987401585068952741935277415527678380021212624846722242500708422759563558995936977274580301379494195702461, 12251634003683452916928102291170339939586644029776192301741341674585154859358419625191986830852794085541953563738986709807899575511700135958334229151930861, 7051370666077542197248638013011793824477073777322219545882367881807130066168444134964571398112151848834032654978368255218649720738040945429837692857031957, 9773046862351952930368505593284546267554571295872377323111558071278701231472975791962979256551519533723988556870551885073742407630481198192389750289392107, 8883776497660138308720006912582738672888752344326928153810910221453595077711284302041512529457450211602787210761461172326429880594024187025419873043435877, 12056735137145460036580841038332100311160368843873164649606343042416896898793233249873902218683966283969721460087390120622254758027779960740926123005377571, 8819958747150954554494406068232243249186433676383469322817152210037563032056202909377825740775383087605647374150477096718956454225946093710691864988563109, 12246023449098354751049599873213988024512286270964608502444597112110163392131757813461977030270733012385926751192637938686124570227538910606279104888073013, 11308837998867241929817950595621831002334468993828126438599805989088017326675963100044309448653090403889186401929445861220402556074702741108929442867300279, 9184622887414209361516593101129556569811888214607556630094969763910426953786020755838094184972397480276666170685926425137063559394969166216392939257091541, 12896400069515890897430087815982545671830645201023665112429779640768899091287291452408369445919464144390726200808875066389240126909811239597092893733457339, 11227025698697471809912850435140886785315702278826761054472525227951791647003561270585720797267604996360933395122286757099101227901032364782594523739698877, 8162123490656317490361880020667919072708091053716891870691544217490126444997503404094174246087938828993696335191488583306443577208796794274099282013427247, 13366989889442670291461262313757977600095962057470863475519088648267301129719953368943419562144276679400967122727554764013132918505564677243979978807323041, 9920857455945408588203972193444437533164351309299040911469275059092031755811492460585653948481522995557801781838215407648572999358456612525812067538372579, 7139402473546047825312503780125417567716958846513076797328672521987900978293260385267945187604725349720103672258987935569856239987227455748213833342843243, 13108142660294572752252393081421368493392921884487755391460006730258159004638343897340537616297811742032405724656497443006056456690449881719305597286675631, 13276762958403786077380090195631980415297280849950287990717193547481553124160398455403123819234755237450529090601858784999113026218918277529515287668651121, 12463094640052886550696551772104539361264529587569204472038955376345085195998921095774583176899949596998985033050547755235409943131811058035802010421860899, 11307743131694864808301935844724645695851330736969875190167422024500753079857478680029193758960169072890576310607053767920339034290416580654771095674487943, 10053742503547378455068966704402695956702795408343604912294923217443553169726438945982031485796964462946592530592946335569560364464958066521486506177193131, 9703695763451799125258961776229325510814289358679213305418559381901496449849584244211834872313767844996255556721041007654625153809128987422992102292472533, 8148189465927721940294369879439913703690047528695196368949823197675716174991296513758196009346701553643721225250628151384047219921709201619262393792138023, 9114150910964237818418367840207724528917302406836157928223872622442928604249864486858755737149640683259834299165900696585038569188627682022002709058902291, 12273514376180781903469287345188404399033432117915094289694407562166649079228640510678711431664410226301556172582177240184695103942141430877677144285616059, 8355005721684425514882933910286584148305344580589623112959517428993968438533866906223777778058096962333203237111245328436600994120168924143849685728268811, 8957883838807471492147480816683526636019698464133185237668243268667169800811696770484487123560197988448434475112352005768286417529319182162245840523697001, 12168542584724814356632409768687396920143300559579648963851924568387314914334359305942685551210180448419674060219496395116081866784918059237133414041227833, 12285935007930825571672128346804313607196190465690759870758278705086034778808662886056460827935986285259185071514490942831585313190946386878622608868345563, 7719913817859572377164973343651155934060296607908537845256755472465025202751239980758950094865067751407889569369974011139801401586939119147773466111699913]cs = [3911325901261770731066343727353093385607196883601022244426857460074338420692610012414571623512152485474248169220030587839849722757773859682519433853455847, 4198555117325325874584019691418573071733167640213933749582347442518997588452211673143722179281773602455507001395983681009769848414007206268682184816168744, 4422173666634983234895098798813962037875417568235708524339826709271381748884936178371767574064794177416615710120223914725873239836121654705208614576413533, 3540260422555697887869627546208164711550015909378340105077652177481959576550678379723450981807556863572610759824660630418670546203733170058626755080797998, 6451498467498935201092514865627931677091078787997097414208430992183264950579022373372254486595458117887305393317663712337699331503725124287017134808484874, 3439629581963524351810430910737336124616316641656190641248434504621774235943514617301857917041111617104850245148746427180069743940612560718213177903427306, 4279468191481832212496939242093486044278976937965085475567008228061184947513156012369586970486543083130565628906296600553024574099481246534878242920637212, 4102135455518061133919027670571325279976222647984452353051395864554309521223498761823084717077102213648612826513661629599971609555235760152049549057234342, 329051927890365028889097463563711966673066795688728876214731188783168691555262156515161429328581094087585127929869064685419149676592073496155898360311360, 1674347209896897571502352451063188834938904430329951752111921115230349947823188121972980025563878887201507629419811736910690965020923751424101521816057970, 4779084317811375050159574994746297486592271247137823471375199626788956576998627181220489952507937768042501203098391966702297812537463211799837921684467541, 5240331815784322792144549873873658636726233093228415489098002982220769676718681132737794994708716389174162820721646744776624413735318240597745363490427584, 2689716894922604875455207695253665212853470308341743040957367957727155614199743562225147359614514189877983156892749669804800163252617480446565479990148021, 449708769594599088851244243076921016853502252396793496349534051273454215985560340288452398756880916680293627457774430655982228613348249480600180821975835, 1584603978331289335352997151059666773277943458357161051278658090420067023680231414255557805410288144092653121568766136372728095300982743309696347031121424, 4874260053151700374809337053763032489184725334196495160358275038586824027920238733886703163018450814805937363825223459277373073591021082276610135118976834, 3524374131362906900545297291947110177298862564718451821839794960169356082042548386553363480921097452902723033854749443288682983558847052843293666815425196, 6544123591499569232021913370293570477776709315008783531720886545784773471486769240711262562401683145937715612435213816372680189321141928790509490282629891, 4873861166228118967099569086478548167127431415017791678812419676791754466935832034870862000658789609084166891933970013849850146718379819943737269970654866, 4100817874436703071716655163972145036104985973164830547825929590871920825981241934633977227547934514142660786061291026657802357404024236287955309372489516, 343238276681348130286495167739162902430650061145485619903964358840996341335935043000395056684771452815629410388891486531126938900311458948803147120186532, 2683710724350412998770392318832434885304538325033159937379489319924346689197445720734209841902612235485016866254994045969716413020197296428323832404151182, 5909464641105704179999104311562416363090166762341644691188169716182958971270396007422581429813172933930581475771306034495224054972725230757675444731953480, 105593489999747649490909471306354863316673821363863362258853043970534652401274789197677558215188249074837829003335733211890211648501689656345824858507373, 4992379366542645691375959247465888889778118153982142100956809440855745659745235576280578316185469306620017845690312554043770651058126536040173113949524396, 6533456398244789907636779407045515567135195474284185379689518387558345997627435421582437390053234675991361808532278264077968540197407743744279106871716267, 5169360398767270275853790242315213671633880428212603766301308853363063092609582572957561138022806887895634140899640025570759919257615537375706008159680239, 203310740924699994885931266978520636166917734618272844754878785050509801614513144739164450834936178065792112797202959106365282699245578309060905297742706, 3143563289239398127009575193211845399079310618985464994769603542400451633289266080869317336163844517539211542909055869608349639432145332113320465388067087, 4016252180207572047405081190649590978593306403200098541033213590567723751195926093369984531729148621419589009515870336049849542537363832071754623330736088]enc = 1315637864146686255246675143589215932218700984880749264689270214639479160648747323586062096067740047809798944996253169402675772469028914904598116394230426\n\n求解xx为512bit，有30个关系式：\n\n这里的  和  都为512bit， 为400bit方程中的x都是相同的，尝试联立然后消掉x，对于第0个和第i个等式，有：\n$$\\begin{matrix}c_i\\equiv(r_ix+s_i)\\mod p\\c_0\\equiv(r_0x+s_0)\\mod p\\end{matrix}$$\n消掉x，再将未知的s移到一边，得到\n\n右边是已知的，左边  的系数也是已知的。\n构造矩阵\n\n即可解得 ，进而求出 \nDLP有enc = pow(x,flag,p)\n使用Pohlig-Hellman算法，利用p-1的小素数因子求解DLP问题，在通过CRT得到flag\n完整代码\nfrom Crypto.Util.number import *p = 6897108443075981744484758716081045417854227543713106404294789655180105457499042179717447342593790180943415014044830872925165163457476209819356694244840079rs = [12844634549263053228759749264403637022740290008286987401585068952741935277415527678380021212624846722242500708422759563558995936977274580301379494195702461, 12251634003683452916928102291170339939586644029776192301741341674585154859358419625191986830852794085541953563738986709807899575511700135958334229151930861, 7051370666077542197248638013011793824477073777322219545882367881807130066168444134964571398112151848834032654978368255218649720738040945429837692857031957, 9773046862351952930368505593284546267554571295872377323111558071278701231472975791962979256551519533723988556870551885073742407630481198192389750289392107, 8883776497660138308720006912582738672888752344326928153810910221453595077711284302041512529457450211602787210761461172326429880594024187025419873043435877, 12056735137145460036580841038332100311160368843873164649606343042416896898793233249873902218683966283969721460087390120622254758027779960740926123005377571, 8819958747150954554494406068232243249186433676383469322817152210037563032056202909377825740775383087605647374150477096718956454225946093710691864988563109, 12246023449098354751049599873213988024512286270964608502444597112110163392131757813461977030270733012385926751192637938686124570227538910606279104888073013, 11308837998867241929817950595621831002334468993828126438599805989088017326675963100044309448653090403889186401929445861220402556074702741108929442867300279, 9184622887414209361516593101129556569811888214607556630094969763910426953786020755838094184972397480276666170685926425137063559394969166216392939257091541, 12896400069515890897430087815982545671830645201023665112429779640768899091287291452408369445919464144390726200808875066389240126909811239597092893733457339, 11227025698697471809912850435140886785315702278826761054472525227951791647003561270585720797267604996360933395122286757099101227901032364782594523739698877, 8162123490656317490361880020667919072708091053716891870691544217490126444997503404094174246087938828993696335191488583306443577208796794274099282013427247, 13366989889442670291461262313757977600095962057470863475519088648267301129719953368943419562144276679400967122727554764013132918505564677243979978807323041, 9920857455945408588203972193444437533164351309299040911469275059092031755811492460585653948481522995557801781838215407648572999358456612525812067538372579, 7139402473546047825312503780125417567716958846513076797328672521987900978293260385267945187604725349720103672258987935569856239987227455748213833342843243, 13108142660294572752252393081421368493392921884487755391460006730258159004638343897340537616297811742032405724656497443006056456690449881719305597286675631, 13276762958403786077380090195631980415297280849950287990717193547481553124160398455403123819234755237450529090601858784999113026218918277529515287668651121, 12463094640052886550696551772104539361264529587569204472038955376345085195998921095774583176899949596998985033050547755235409943131811058035802010421860899, 11307743131694864808301935844724645695851330736969875190167422024500753079857478680029193758960169072890576310607053767920339034290416580654771095674487943, 10053742503547378455068966704402695956702795408343604912294923217443553169726438945982031485796964462946592530592946335569560364464958066521486506177193131, 9703695763451799125258961776229325510814289358679213305418559381901496449849584244211834872313767844996255556721041007654625153809128987422992102292472533, 8148189465927721940294369879439913703690047528695196368949823197675716174991296513758196009346701553643721225250628151384047219921709201619262393792138023, 9114150910964237818418367840207724528917302406836157928223872622442928604249864486858755737149640683259834299165900696585038569188627682022002709058902291, 12273514376180781903469287345188404399033432117915094289694407562166649079228640510678711431664410226301556172582177240184695103942141430877677144285616059, 8355005721684425514882933910286584148305344580589623112959517428993968438533866906223777778058096962333203237111245328436600994120168924143849685728268811, 8957883838807471492147480816683526636019698464133185237668243268667169800811696770484487123560197988448434475112352005768286417529319182162245840523697001, 12168542584724814356632409768687396920143300559579648963851924568387314914334359305942685551210180448419674060219496395116081866784918059237133414041227833, 12285935007930825571672128346804313607196190465690759870758278705086034778808662886056460827935986285259185071514490942831585313190946386878622608868345563, 7719913817859572377164973343651155934060296607908537845256755472465025202751239980758950094865067751407889569369974011139801401586939119147773466111699913]cs = [3911325901261770731066343727353093385607196883601022244426857460074338420692610012414571623512152485474248169220030587839849722757773859682519433853455847, 4198555117325325874584019691418573071733167640213933749582347442518997588452211673143722179281773602455507001395983681009769848414007206268682184816168744, 4422173666634983234895098798813962037875417568235708524339826709271381748884936178371767574064794177416615710120223914725873239836121654705208614576413533, 3540260422555697887869627546208164711550015909378340105077652177481959576550678379723450981807556863572610759824660630418670546203733170058626755080797998, 6451498467498935201092514865627931677091078787997097414208430992183264950579022373372254486595458117887305393317663712337699331503725124287017134808484874, 3439629581963524351810430910737336124616316641656190641248434504621774235943514617301857917041111617104850245148746427180069743940612560718213177903427306, 4279468191481832212496939242093486044278976937965085475567008228061184947513156012369586970486543083130565628906296600553024574099481246534878242920637212, 4102135455518061133919027670571325279976222647984452353051395864554309521223498761823084717077102213648612826513661629599971609555235760152049549057234342, 329051927890365028889097463563711966673066795688728876214731188783168691555262156515161429328581094087585127929869064685419149676592073496155898360311360, 1674347209896897571502352451063188834938904430329951752111921115230349947823188121972980025563878887201507629419811736910690965020923751424101521816057970, 4779084317811375050159574994746297486592271247137823471375199626788956576998627181220489952507937768042501203098391966702297812537463211799837921684467541, 5240331815784322792144549873873658636726233093228415489098002982220769676718681132737794994708716389174162820721646744776624413735318240597745363490427584, 2689716894922604875455207695253665212853470308341743040957367957727155614199743562225147359614514189877983156892749669804800163252617480446565479990148021, 449708769594599088851244243076921016853502252396793496349534051273454215985560340288452398756880916680293627457774430655982228613348249480600180821975835, 1584603978331289335352997151059666773277943458357161051278658090420067023680231414255557805410288144092653121568766136372728095300982743309696347031121424, 4874260053151700374809337053763032489184725334196495160358275038586824027920238733886703163018450814805937363825223459277373073591021082276610135118976834, 3524374131362906900545297291947110177298862564718451821839794960169356082042548386553363480921097452902723033854749443288682983558847052843293666815425196, 6544123591499569232021913370293570477776709315008783531720886545784773471486769240711262562401683145937715612435213816372680189321141928790509490282629891, 4873861166228118967099569086478548167127431415017791678812419676791754466935832034870862000658789609084166891933970013849850146718379819943737269970654866, 4100817874436703071716655163972145036104985973164830547825929590871920825981241934633977227547934514142660786061291026657802357404024236287955309372489516, 343238276681348130286495167739162902430650061145485619903964358840996341335935043000395056684771452815629410388891486531126938900311458948803147120186532, 2683710724350412998770392318832434885304538325033159937379489319924346689197445720734209841902612235485016866254994045969716413020197296428323832404151182, 5909464641105704179999104311562416363090166762341644691188169716182958971270396007422581429813172933930581475771306034495224054972725230757675444731953480, 105593489999747649490909471306354863316673821363863362258853043970534652401274789197677558215188249074837829003335733211890211648501689656345824858507373, 4992379366542645691375959247465888889778118153982142100956809440855745659745235576280578316185469306620017845690312554043770651058126536040173113949524396, 6533456398244789907636779407045515567135195474284185379689518387558345997627435421582437390053234675991361808532278264077968540197407743744279106871716267, 5169360398767270275853790242315213671633880428212603766301308853363063092609582572957561138022806887895634140899640025570759919257615537375706008159680239, 203310740924699994885931266978520636166917734618272844754878785050509801614513144739164450834936178065792112797202959106365282699245578309060905297742706, 3143563289239398127009575193211845399079310618985464994769603542400451633289266080869317336163844517539211542909055869608349639432145332113320465388067087, 4016252180207572047405081190649590978593306403200098541033213590567723751195926093369984531729148621419589009515870336049849542537363832071754623330736088]enc = 1315637864146686255246675143589215932218700984880749264689270214639479160648747323586062096067740047809798944996253169402675772469028914904598116394230426r0_ = pow(rs[0],-1,p)A = lambda i:rs[i] * r0_ % pB = lambda i:(cs[i]*rs[0] - cs[0]*rs[i]) * r0_ % pA = matrix(ZZ,1,29,[A(i) for i in range(1,30)])B = matrix(ZZ,1,29,[B(i) for i in range(1,30)])    M = block_matrix([    [1,0,A],    [0,1,B],    [0,0,p]])L = M.LLL()s0 = abs(L[0][0])x = (cs[0]-s0) * r0_ % pres = []facs = [i[0] for i in factor(p-1)]for fac in facs[:-1]:    print(fac)    r = discrete_log_lambda(a = pow(enc,(p-1)//fac,p),                            base = pow(x,(p-1)//fac,p),                            bounds = (1,fac))    res.append(r)res = crt(res,facs[:-1])mod = prod(facs[:-1])for i in range(100):    f = long_to_bytes(int(res+i*mod))    if b'flag' in f:        print(i,f)        break        # flag{70b1b709ce431682addb581596320007}\n\n有点菜，x没构造出来 赛后出的。\n","tags":["WriteUp","crypto","CTF"]}]